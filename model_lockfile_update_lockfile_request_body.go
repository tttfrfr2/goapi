/*
Future Vuls Public API

Future Vuls Public API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LockfileUpdateLockfileRequestBody struct for LockfileUpdateLockfileRequestBody
type LockfileUpdateLockfileRequestBody struct {
	// fileContent of the lockfile
	FileContent *string `json:"fileContent,omitempty"`
	// Path of lockfile
	Path *string `json:"path,omitempty"`
}

// NewLockfileUpdateLockfileRequestBody instantiates a new LockfileUpdateLockfileRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLockfileUpdateLockfileRequestBody() *LockfileUpdateLockfileRequestBody {
	this := LockfileUpdateLockfileRequestBody{}
	return &this
}

// NewLockfileUpdateLockfileRequestBodyWithDefaults instantiates a new LockfileUpdateLockfileRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLockfileUpdateLockfileRequestBodyWithDefaults() *LockfileUpdateLockfileRequestBody {
	this := LockfileUpdateLockfileRequestBody{}
	return &this
}

// GetFileContent returns the FileContent field value if set, zero value otherwise.
func (o *LockfileUpdateLockfileRequestBody) GetFileContent() string {
	if o == nil || o.FileContent == nil {
		var ret string
		return ret
	}
	return *o.FileContent
}

// GetFileContentOk returns a tuple with the FileContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockfileUpdateLockfileRequestBody) GetFileContentOk() (*string, bool) {
	if o == nil || o.FileContent == nil {
		return nil, false
	}
	return o.FileContent, true
}

// HasFileContent returns a boolean if a field has been set.
func (o *LockfileUpdateLockfileRequestBody) HasFileContent() bool {
	if o != nil && o.FileContent != nil {
		return true
	}

	return false
}

// SetFileContent gets a reference to the given string and assigns it to the FileContent field.
func (o *LockfileUpdateLockfileRequestBody) SetFileContent(v string) {
	o.FileContent = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *LockfileUpdateLockfileRequestBody) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockfileUpdateLockfileRequestBody) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *LockfileUpdateLockfileRequestBody) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *LockfileUpdateLockfileRequestBody) SetPath(v string) {
	o.Path = &v
}

func (o LockfileUpdateLockfileRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileContent != nil {
		toSerialize["fileContent"] = o.FileContent
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	return json.Marshal(toSerialize)
}

type NullableLockfileUpdateLockfileRequestBody struct {
	value *LockfileUpdateLockfileRequestBody
	isSet bool
}

func (v NullableLockfileUpdateLockfileRequestBody) Get() *LockfileUpdateLockfileRequestBody {
	return v.value
}

func (v *NullableLockfileUpdateLockfileRequestBody) Set(val *LockfileUpdateLockfileRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableLockfileUpdateLockfileRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableLockfileUpdateLockfileRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockfileUpdateLockfileRequestBody(val *LockfileUpdateLockfileRequestBody) *NullableLockfileUpdateLockfileRequestBody {
	return &NullableLockfileUpdateLockfileRequestBody{value: val, isSet: true}
}

func (v NullableLockfileUpdateLockfileRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockfileUpdateLockfileRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


