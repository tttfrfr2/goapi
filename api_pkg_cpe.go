/*
Future Vuls Public API

Future Vuls Public API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// PkgCpeApiService PkgCpeApi service
type PkgCpeApiService service

type ApiPkgCpeAddCpeRequest struct {
	ctx context.Context
	ApiService *PkgCpeApiService
	addCpeRequestBody *PkgCpeAddCpeRequestBody
	authorization *string
}

func (r ApiPkgCpeAddCpeRequest) AddCpeRequestBody(addCpeRequestBody PkgCpeAddCpeRequestBody) ApiPkgCpeAddCpeRequest {
	r.addCpeRequestBody = &addCpeRequestBody
	return r
}

// api key auth
func (r ApiPkgCpeAddCpeRequest) Authorization(authorization string) ApiPkgCpeAddCpeRequest {
	r.authorization = &authorization
	return r
}

func (r ApiPkgCpeAddCpeRequest) Execute() (*PkgCpeAddCpeResponseBody, *http.Response, error) {
	return r.ApiService.PkgCpeAddCpeExecute(r)
}

/*
PkgCpeAddCpe addCpe pkgCpe

add cpe

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPkgCpeAddCpeRequest
*/
func (a *PkgCpeApiService) PkgCpeAddCpe(ctx context.Context) ApiPkgCpeAddCpeRequest {
	return ApiPkgCpeAddCpeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PkgCpeAddCpeResponseBody
func (a *PkgCpeApiService) PkgCpeAddCpeExecute(r ApiPkgCpeAddCpeRequest) (*PkgCpeAddCpeResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PkgCpeAddCpeResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PkgCpeApiService.PkgCpeAddCpe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pkgCpe/cpe"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addCpeRequestBody == nil {
		return localVarReturnValue, nil, reportError("addCpeRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml", "application/gob"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/gob"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	// body params
	localVarPostBody = r.addCpeRequestBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPkgCpeDeleteCpeRequest struct {
	ctx context.Context
	ApiService *PkgCpeApiService
	cpeID int64
	authorization *string
}

// api key auth
func (r ApiPkgCpeDeleteCpeRequest) Authorization(authorization string) ApiPkgCpeDeleteCpeRequest {
	r.authorization = &authorization
	return r
}

func (r ApiPkgCpeDeleteCpeRequest) Execute() (*http.Response, error) {
	return r.ApiService.PkgCpeDeleteCpeExecute(r)
}

/*
PkgCpeDeleteCpe deleteCpe pkgCpe

delete cpe (urlにcpeIDを指定してください。cpeIDの指定のないアクセス方法は今後削除されます。)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cpeID cpe ID
 @return ApiPkgCpeDeleteCpeRequest
*/
func (a *PkgCpeApiService) PkgCpeDeleteCpe(ctx context.Context, cpeID int64) ApiPkgCpeDeleteCpeRequest {
	return ApiPkgCpeDeleteCpeRequest{
		ApiService: a,
		ctx: ctx,
		cpeID: cpeID,
	}
}

// Execute executes the request
func (a *PkgCpeApiService) PkgCpeDeleteCpeExecute(r ApiPkgCpeDeleteCpeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PkgCpeApiService.PkgCpeDeleteCpe")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pkgCpe/cpe/{cpeID}"
	localVarPath = strings.Replace(localVarPath, "{"+"cpeID"+"}", url.PathEscape(parameterToString(r.cpeID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPkgCpeDeleteCpeDeprecatedRequest struct {
	ctx context.Context
	ApiService *PkgCpeApiService
	deleteCpeDeprecatedRequestBody *PkgCpeDeleteCpeDeprecatedRequestBody
	authorization *string
}

func (r ApiPkgCpeDeleteCpeDeprecatedRequest) DeleteCpeDeprecatedRequestBody(deleteCpeDeprecatedRequestBody PkgCpeDeleteCpeDeprecatedRequestBody) ApiPkgCpeDeleteCpeDeprecatedRequest {
	r.deleteCpeDeprecatedRequestBody = &deleteCpeDeprecatedRequestBody
	return r
}

// api key auth
func (r ApiPkgCpeDeleteCpeDeprecatedRequest) Authorization(authorization string) ApiPkgCpeDeleteCpeDeprecatedRequest {
	r.authorization = &authorization
	return r
}

func (r ApiPkgCpeDeleteCpeDeprecatedRequest) Execute() (*http.Response, error) {
	return r.ApiService.PkgCpeDeleteCpeDeprecatedExecute(r)
}

/*
PkgCpeDeleteCpeDeprecated deleteCpe_deprecated pkgCpe

[deprecated] urlにcpeIDを指定して利用してください。cpeIDの指定のないこちらのアクセス方法は今後削除されます。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPkgCpeDeleteCpeDeprecatedRequest
*/
func (a *PkgCpeApiService) PkgCpeDeleteCpeDeprecated(ctx context.Context) ApiPkgCpeDeleteCpeDeprecatedRequest {
	return ApiPkgCpeDeleteCpeDeprecatedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PkgCpeApiService) PkgCpeDeleteCpeDeprecatedExecute(r ApiPkgCpeDeleteCpeDeprecatedRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PkgCpeApiService.PkgCpeDeleteCpeDeprecated")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pkgCpe/cpe"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deleteCpeDeprecatedRequestBody == nil {
		return nil, reportError("deleteCpeDeprecatedRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml", "application/gob"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	// body params
	localVarPostBody = r.deleteCpeDeprecatedRequestBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPkgCpeGetCpeDetailRequest struct {
	ctx context.Context
	ApiService *PkgCpeApiService
	cpeID int64
	authorization *string
}

// api key auth
func (r ApiPkgCpeGetCpeDetailRequest) Authorization(authorization string) ApiPkgCpeGetCpeDetailRequest {
	r.authorization = &authorization
	return r
}

func (r ApiPkgCpeGetCpeDetailRequest) Execute() (*PkgCpeGetCpeDetailResponseBody, *http.Response, error) {
	return r.ApiService.PkgCpeGetCpeDetailExecute(r)
}

/*
PkgCpeGetCpeDetail getCpeDetail pkgCpe

cpe detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cpeID cpe ID
 @return ApiPkgCpeGetCpeDetailRequest
*/
func (a *PkgCpeApiService) PkgCpeGetCpeDetail(ctx context.Context, cpeID int64) ApiPkgCpeGetCpeDetailRequest {
	return ApiPkgCpeGetCpeDetailRequest{
		ApiService: a,
		ctx: ctx,
		cpeID: cpeID,
	}
}

// Execute executes the request
//  @return PkgCpeGetCpeDetailResponseBody
func (a *PkgCpeApiService) PkgCpeGetCpeDetailExecute(r ApiPkgCpeGetCpeDetailRequest) (*PkgCpeGetCpeDetailResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PkgCpeGetCpeDetailResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PkgCpeApiService.PkgCpeGetCpeDetail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pkgCpe/cpe/{cpeID}"
	localVarPath = strings.Replace(localVarPath, "{"+"cpeID"+"}", url.PathEscape(parameterToString(r.cpeID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/gob"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPkgCpeGetPkgCpeListRequest struct {
	ctx context.Context
	ApiService *PkgCpeApiService
	page *int32
	limit *int32
	offset *int32
	filterCveID *string
	filterTaskID *int32
	filterServerID *int32
	filterRoleID *int32
	authorization *string
}

// Page Number
func (r ApiPkgCpeGetPkgCpeListRequest) Page(page int32) ApiPkgCpeGetPkgCpeListRequest {
	r.page = &page
	return r
}

// Limit
func (r ApiPkgCpeGetPkgCpeListRequest) Limit(limit int32) ApiPkgCpeGetPkgCpeListRequest {
	r.limit = &limit
	return r
}

// Offset
func (r ApiPkgCpeGetPkgCpeListRequest) Offset(offset int32) ApiPkgCpeGetPkgCpeListRequest {
	r.offset = &offset
	return r
}

// CveID filter
func (r ApiPkgCpeGetPkgCpeListRequest) FilterCveID(filterCveID string) ApiPkgCpeGetPkgCpeListRequest {
	r.filterCveID = &filterCveID
	return r
}

// TaskID filter
func (r ApiPkgCpeGetPkgCpeListRequest) FilterTaskID(filterTaskID int32) ApiPkgCpeGetPkgCpeListRequest {
	r.filterTaskID = &filterTaskID
	return r
}

// ServerID filter
func (r ApiPkgCpeGetPkgCpeListRequest) FilterServerID(filterServerID int32) ApiPkgCpeGetPkgCpeListRequest {
	r.filterServerID = &filterServerID
	return r
}

// ServerRoleID filter
func (r ApiPkgCpeGetPkgCpeListRequest) FilterRoleID(filterRoleID int32) ApiPkgCpeGetPkgCpeListRequest {
	r.filterRoleID = &filterRoleID
	return r
}

// api key auth
func (r ApiPkgCpeGetPkgCpeListRequest) Authorization(authorization string) ApiPkgCpeGetPkgCpeListRequest {
	r.authorization = &authorization
	return r
}

func (r ApiPkgCpeGetPkgCpeListRequest) Execute() (*PkgCpeGetPkgCpeListResponseBody, *http.Response, error) {
	return r.ApiService.PkgCpeGetPkgCpeListExecute(r)
}

/*
PkgCpeGetPkgCpeList getPkgCpeList pkgCpe

pkgCpe list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPkgCpeGetPkgCpeListRequest
*/
func (a *PkgCpeApiService) PkgCpeGetPkgCpeList(ctx context.Context) ApiPkgCpeGetPkgCpeListRequest {
	return ApiPkgCpeGetPkgCpeListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PkgCpeGetPkgCpeListResponseBody
func (a *PkgCpeApiService) PkgCpeGetPkgCpeListExecute(r ApiPkgCpeGetPkgCpeListRequest) (*PkgCpeGetPkgCpeListResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PkgCpeGetPkgCpeListResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PkgCpeApiService.PkgCpeGetPkgCpeList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pkgCpes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.filterCveID != nil {
		localVarQueryParams.Add("filterCveID", parameterToString(*r.filterCveID, ""))
	}
	if r.filterTaskID != nil {
		localVarQueryParams.Add("filterTaskID", parameterToString(*r.filterTaskID, ""))
	}
	if r.filterServerID != nil {
		localVarQueryParams.Add("filterServerID", parameterToString(*r.filterServerID, ""))
	}
	if r.filterRoleID != nil {
		localVarQueryParams.Add("filterRoleID", parameterToString(*r.filterRoleID, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/gob"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPkgCpeGetPkgDetailRequest struct {
	ctx context.Context
	ApiService *PkgCpeApiService
	pkgID int64
	authorization *string
}

// api key auth
func (r ApiPkgCpeGetPkgDetailRequest) Authorization(authorization string) ApiPkgCpeGetPkgDetailRequest {
	r.authorization = &authorization
	return r
}

func (r ApiPkgCpeGetPkgDetailRequest) Execute() (*PkgCpeGetPkgDetailResponseBody, *http.Response, error) {
	return r.ApiService.PkgCpeGetPkgDetailExecute(r)
}

/*
PkgCpeGetPkgDetail getPkgDetail pkgCpe

pkg detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkgID PackageID
 @return ApiPkgCpeGetPkgDetailRequest
*/
func (a *PkgCpeApiService) PkgCpeGetPkgDetail(ctx context.Context, pkgID int64) ApiPkgCpeGetPkgDetailRequest {
	return ApiPkgCpeGetPkgDetailRequest{
		ApiService: a,
		ctx: ctx,
		pkgID: pkgID,
	}
}

// Execute executes the request
//  @return PkgCpeGetPkgDetailResponseBody
func (a *PkgCpeApiService) PkgCpeGetPkgDetailExecute(r ApiPkgCpeGetPkgDetailRequest) (*PkgCpeGetPkgDetailResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PkgCpeGetPkgDetailResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PkgCpeApiService.PkgCpeGetPkgDetail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pkgCpe/pkg/{pkgID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkgID"+"}", url.PathEscape(parameterToString(r.pkgID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/gob"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
