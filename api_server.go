/*
Future Vuls Public API

Future Vuls Public API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ServerApiService ServerApi service
type ServerApiService service

type ApiServerCreatePkgPasteServerRequest struct {
	ctx context.Context
	ApiService *ServerApiService
	createPkgPasteServerRequestBody *ServerCreatePkgPasteServerRequestBody
	authorization *string
}

func (r ApiServerCreatePkgPasteServerRequest) CreatePkgPasteServerRequestBody(createPkgPasteServerRequestBody ServerCreatePkgPasteServerRequestBody) ApiServerCreatePkgPasteServerRequest {
	r.createPkgPasteServerRequestBody = &createPkgPasteServerRequestBody
	return r
}

// api key auth
func (r ApiServerCreatePkgPasteServerRequest) Authorization(authorization string) ApiServerCreatePkgPasteServerRequest {
	r.authorization = &authorization
	return r
}

func (r ApiServerCreatePkgPasteServerRequest) Execute() (*ServerCreatePkgPasteServerResponseBody, *http.Response, error) {
	return r.ApiService.ServerCreatePkgPasteServerExecute(r)
}

/*
ServerCreatePkgPasteServer createPkgPasteServer server

create paste server

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServerCreatePkgPasteServerRequest
*/
func (a *ServerApiService) ServerCreatePkgPasteServer(ctx context.Context) ApiServerCreatePkgPasteServerRequest {
	return ApiServerCreatePkgPasteServerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerCreatePkgPasteServerResponseBody
func (a *ServerApiService) ServerCreatePkgPasteServerExecute(r ApiServerCreatePkgPasteServerRequest) (*ServerCreatePkgPasteServerResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerCreatePkgPasteServerResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerApiService.ServerCreatePkgPasteServer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/server/paste"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createPkgPasteServerRequestBody == nil {
		return localVarReturnValue, nil, reportError("createPkgPasteServerRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml", "application/gob"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/gob"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	// body params
	localVarPostBody = r.createPkgPasteServerRequestBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServerDeleteServerRequest struct {
	ctx context.Context
	ApiService *ServerApiService
	serverID int64
	authorization *string
}

// api key auth
func (r ApiServerDeleteServerRequest) Authorization(authorization string) ApiServerDeleteServerRequest {
	r.authorization = &authorization
	return r
}

func (r ApiServerDeleteServerRequest) Execute() (*http.Response, error) {
	return r.ApiService.ServerDeleteServerExecute(r)
}

/*
ServerDeleteServer deleteServer server

server delete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverID Server ID
 @return ApiServerDeleteServerRequest
*/
func (a *ServerApiService) ServerDeleteServer(ctx context.Context, serverID int64) ApiServerDeleteServerRequest {
	return ApiServerDeleteServerRequest{
		ApiService: a,
		ctx: ctx,
		serverID: serverID,
	}
}

// Execute executes the request
func (a *ServerApiService) ServerDeleteServerExecute(r ApiServerDeleteServerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerApiService.ServerDeleteServer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/server/{serverID}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverID"+"}", url.PathEscape(parameterToString(r.serverID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiServerGetServerDetailRequest struct {
	ctx context.Context
	ApiService *ServerApiService
	serverID int64
	authorization *string
}

// api key auth
func (r ApiServerGetServerDetailRequest) Authorization(authorization string) ApiServerGetServerDetailRequest {
	r.authorization = &authorization
	return r
}

func (r ApiServerGetServerDetailRequest) Execute() (*ServerGetServerDetailResponseBody, *http.Response, error) {
	return r.ApiService.ServerGetServerDetailExecute(r)
}

/*
ServerGetServerDetail getServerDetail server

server detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverID Server ID
 @return ApiServerGetServerDetailRequest
*/
func (a *ServerApiService) ServerGetServerDetail(ctx context.Context, serverID int64) ApiServerGetServerDetailRequest {
	return ApiServerGetServerDetailRequest{
		ApiService: a,
		ctx: ctx,
		serverID: serverID,
	}
}

// Execute executes the request
//  @return ServerGetServerDetailResponseBody
func (a *ServerApiService) ServerGetServerDetailExecute(r ApiServerGetServerDetailRequest) (*ServerGetServerDetailResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerGetServerDetailResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerApiService.ServerGetServerDetail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/server/{serverID}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverID"+"}", url.PathEscape(parameterToString(r.serverID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/gob"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServerGetServerDetailByUUIDRequest struct {
	ctx context.Context
	ApiService *ServerApiService
	serverUuid string
	authorization *string
}

// api key auth
func (r ApiServerGetServerDetailByUUIDRequest) Authorization(authorization string) ApiServerGetServerDetailByUUIDRequest {
	r.authorization = &authorization
	return r
}

func (r ApiServerGetServerDetailByUUIDRequest) Execute() (*ServerGetServerDetailByUUIDResponseBody, *http.Response, error) {
	return r.ApiService.ServerGetServerDetailByUUIDExecute(r)
}

/*
ServerGetServerDetailByUUID getServerDetailByUUID server

server detail by UUID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverUuid Server UUID
 @return ApiServerGetServerDetailByUUIDRequest
*/
func (a *ServerApiService) ServerGetServerDetailByUUID(ctx context.Context, serverUuid string) ApiServerGetServerDetailByUUIDRequest {
	return ApiServerGetServerDetailByUUIDRequest{
		ApiService: a,
		ctx: ctx,
		serverUuid: serverUuid,
	}
}

// Execute executes the request
//  @return ServerGetServerDetailByUUIDResponseBody
func (a *ServerApiService) ServerGetServerDetailByUUIDExecute(r ApiServerGetServerDetailByUUIDRequest) (*ServerGetServerDetailByUUIDResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerGetServerDetailByUUIDResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerApiService.ServerGetServerDetailByUUID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/server/uuid/{serverUuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverUuid"+"}", url.PathEscape(parameterToString(r.serverUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/gob"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServerGetServerListRequest struct {
	ctx context.Context
	ApiService *ServerApiService
	page *int32
	limit *int32
	offset *int32
	filterCveID *string
	filterRoleID *int32
	filterTagName *string
	authorization *string
}

// Page Number
func (r ApiServerGetServerListRequest) Page(page int32) ApiServerGetServerListRequest {
	r.page = &page
	return r
}

// Limit
func (r ApiServerGetServerListRequest) Limit(limit int32) ApiServerGetServerListRequest {
	r.limit = &limit
	return r
}

// Offset
func (r ApiServerGetServerListRequest) Offset(offset int32) ApiServerGetServerListRequest {
	r.offset = &offset
	return r
}

// CveID filter
func (r ApiServerGetServerListRequest) FilterCveID(filterCveID string) ApiServerGetServerListRequest {
	r.filterCveID = &filterCveID
	return r
}

// ServerRoleID filter
func (r ApiServerGetServerListRequest) FilterRoleID(filterRoleID int32) ApiServerGetServerListRequest {
	r.filterRoleID = &filterRoleID
	return r
}

// ServerTagName filter
func (r ApiServerGetServerListRequest) FilterTagName(filterTagName string) ApiServerGetServerListRequest {
	r.filterTagName = &filterTagName
	return r
}

// api key auth
func (r ApiServerGetServerListRequest) Authorization(authorization string) ApiServerGetServerListRequest {
	r.authorization = &authorization
	return r
}

func (r ApiServerGetServerListRequest) Execute() (*ServerGetServerListResponseBody, *http.Response, error) {
	return r.ApiService.ServerGetServerListExecute(r)
}

/*
ServerGetServerList getServerList server

server list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServerGetServerListRequest
*/
func (a *ServerApiService) ServerGetServerList(ctx context.Context) ApiServerGetServerListRequest {
	return ApiServerGetServerListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerGetServerListResponseBody
func (a *ServerApiService) ServerGetServerListExecute(r ApiServerGetServerListRequest) (*ServerGetServerListResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerGetServerListResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerApiService.ServerGetServerList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/servers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.filterCveID != nil {
		localVarQueryParams.Add("filterCveID", parameterToString(*r.filterCveID, ""))
	}
	if r.filterRoleID != nil {
		localVarQueryParams.Add("filterRoleID", parameterToString(*r.filterRoleID, ""))
	}
	if r.filterTagName != nil {
		localVarQueryParams.Add("filterTagName", parameterToString(*r.filterTagName, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/gob"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServerUpdatePkgPasteServerRequest struct {
	ctx context.Context
	ApiService *ServerApiService
	serverID int64
	updatePkgPasteServerRequestBody *ServerUpdatePkgPasteServerRequestBody
	authorization *string
}

func (r ApiServerUpdatePkgPasteServerRequest) UpdatePkgPasteServerRequestBody(updatePkgPasteServerRequestBody ServerUpdatePkgPasteServerRequestBody) ApiServerUpdatePkgPasteServerRequest {
	r.updatePkgPasteServerRequestBody = &updatePkgPasteServerRequestBody
	return r
}

// api key auth
func (r ApiServerUpdatePkgPasteServerRequest) Authorization(authorization string) ApiServerUpdatePkgPasteServerRequest {
	r.authorization = &authorization
	return r
}

func (r ApiServerUpdatePkgPasteServerRequest) Execute() (*http.Response, error) {
	return r.ApiService.ServerUpdatePkgPasteServerExecute(r)
}

/*
ServerUpdatePkgPasteServer updatePkgPasteServer server

update paste server

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverID Server ID
 @return ApiServerUpdatePkgPasteServerRequest
*/
func (a *ServerApiService) ServerUpdatePkgPasteServer(ctx context.Context, serverID int64) ApiServerUpdatePkgPasteServerRequest {
	return ApiServerUpdatePkgPasteServerRequest{
		ApiService: a,
		ctx: ctx,
		serverID: serverID,
	}
}

// Execute executes the request
func (a *ServerApiService) ServerUpdatePkgPasteServerExecute(r ApiServerUpdatePkgPasteServerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerApiService.ServerUpdatePkgPasteServer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/server/paste/{serverID}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverID"+"}", url.PathEscape(parameterToString(r.serverID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updatePkgPasteServerRequestBody == nil {
		return nil, reportError("updatePkgPasteServerRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml", "application/gob"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	// body params
	localVarPostBody = r.updatePkgPasteServerRequestBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiServerUpdateServerRequest struct {
	ctx context.Context
	ApiService *ServerApiService
	serverID int64
	updateServerRequestBody *ServerUpdateServerRequestBody
	authorization *string
}

func (r ApiServerUpdateServerRequest) UpdateServerRequestBody(updateServerRequestBody ServerUpdateServerRequestBody) ApiServerUpdateServerRequest {
	r.updateServerRequestBody = &updateServerRequestBody
	return r
}

// api key auth
func (r ApiServerUpdateServerRequest) Authorization(authorization string) ApiServerUpdateServerRequest {
	r.authorization = &authorization
	return r
}

func (r ApiServerUpdateServerRequest) Execute() (*ServerUpdateServerResponseBody, *http.Response, error) {
	return r.ApiService.ServerUpdateServerExecute(r)
}

/*
ServerUpdateServer updateServer server

update server

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverID Server ID
 @return ApiServerUpdateServerRequest
*/
func (a *ServerApiService) ServerUpdateServer(ctx context.Context, serverID int64) ApiServerUpdateServerRequest {
	return ApiServerUpdateServerRequest{
		ApiService: a,
		ctx: ctx,
		serverID: serverID,
	}
}

// Execute executes the request
//  @return ServerUpdateServerResponseBody
func (a *ServerApiService) ServerUpdateServerExecute(r ApiServerUpdateServerRequest) (*ServerUpdateServerResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerUpdateServerResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerApiService.ServerUpdateServer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/server/{serverID}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverID"+"}", url.PathEscape(parameterToString(r.serverID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateServerRequestBody == nil {
		return localVarReturnValue, nil, reportError("updateServerRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml", "application/gob"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/gob"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	// body params
	localVarPostBody = r.updateServerRequestBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
