/*
Future Vuls Public API

Future Vuls Public API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TaskUpdateTaskRequestBody struct for TaskUpdateTaskRequestBody
type TaskUpdateTaskRequestBody struct {
	// applyingPatchOn (YYYY-MM-DD) UTC
	ApplyingPatchOn *string `json:"applyingPatchOn,omitempty"`
	// mainUserID of task
	MainUserID *int64 `json:"mainUserID,omitempty"`
	// Priority of task
	Priority *string `json:"priority,omitempty"`
	// Status of task
	Status *string `json:"status,omitempty"`
	// subUserID of task
	SubUserID *int64 `json:"subUserID,omitempty"`
}

// NewTaskUpdateTaskRequestBody instantiates a new TaskUpdateTaskRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskUpdateTaskRequestBody() *TaskUpdateTaskRequestBody {
	this := TaskUpdateTaskRequestBody{}
	return &this
}

// NewTaskUpdateTaskRequestBodyWithDefaults instantiates a new TaskUpdateTaskRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskUpdateTaskRequestBodyWithDefaults() *TaskUpdateTaskRequestBody {
	this := TaskUpdateTaskRequestBody{}
	return &this
}

// GetApplyingPatchOn returns the ApplyingPatchOn field value if set, zero value otherwise.
func (o *TaskUpdateTaskRequestBody) GetApplyingPatchOn() string {
	if o == nil || o.ApplyingPatchOn == nil {
		var ret string
		return ret
	}
	return *o.ApplyingPatchOn
}

// GetApplyingPatchOnOk returns a tuple with the ApplyingPatchOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdateTaskRequestBody) GetApplyingPatchOnOk() (*string, bool) {
	if o == nil || o.ApplyingPatchOn == nil {
		return nil, false
	}
	return o.ApplyingPatchOn, true
}

// HasApplyingPatchOn returns a boolean if a field has been set.
func (o *TaskUpdateTaskRequestBody) HasApplyingPatchOn() bool {
	if o != nil && o.ApplyingPatchOn != nil {
		return true
	}

	return false
}

// SetApplyingPatchOn gets a reference to the given string and assigns it to the ApplyingPatchOn field.
func (o *TaskUpdateTaskRequestBody) SetApplyingPatchOn(v string) {
	o.ApplyingPatchOn = &v
}

// GetMainUserID returns the MainUserID field value if set, zero value otherwise.
func (o *TaskUpdateTaskRequestBody) GetMainUserID() int64 {
	if o == nil || o.MainUserID == nil {
		var ret int64
		return ret
	}
	return *o.MainUserID
}

// GetMainUserIDOk returns a tuple with the MainUserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdateTaskRequestBody) GetMainUserIDOk() (*int64, bool) {
	if o == nil || o.MainUserID == nil {
		return nil, false
	}
	return o.MainUserID, true
}

// HasMainUserID returns a boolean if a field has been set.
func (o *TaskUpdateTaskRequestBody) HasMainUserID() bool {
	if o != nil && o.MainUserID != nil {
		return true
	}

	return false
}

// SetMainUserID gets a reference to the given int64 and assigns it to the MainUserID field.
func (o *TaskUpdateTaskRequestBody) SetMainUserID(v int64) {
	o.MainUserID = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *TaskUpdateTaskRequestBody) GetPriority() string {
	if o == nil || o.Priority == nil {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdateTaskRequestBody) GetPriorityOk() (*string, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *TaskUpdateTaskRequestBody) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *TaskUpdateTaskRequestBody) SetPriority(v string) {
	o.Priority = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TaskUpdateTaskRequestBody) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdateTaskRequestBody) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TaskUpdateTaskRequestBody) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TaskUpdateTaskRequestBody) SetStatus(v string) {
	o.Status = &v
}

// GetSubUserID returns the SubUserID field value if set, zero value otherwise.
func (o *TaskUpdateTaskRequestBody) GetSubUserID() int64 {
	if o == nil || o.SubUserID == nil {
		var ret int64
		return ret
	}
	return *o.SubUserID
}

// GetSubUserIDOk returns a tuple with the SubUserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdateTaskRequestBody) GetSubUserIDOk() (*int64, bool) {
	if o == nil || o.SubUserID == nil {
		return nil, false
	}
	return o.SubUserID, true
}

// HasSubUserID returns a boolean if a field has been set.
func (o *TaskUpdateTaskRequestBody) HasSubUserID() bool {
	if o != nil && o.SubUserID != nil {
		return true
	}

	return false
}

// SetSubUserID gets a reference to the given int64 and assigns it to the SubUserID field.
func (o *TaskUpdateTaskRequestBody) SetSubUserID(v int64) {
	o.SubUserID = &v
}

func (o TaskUpdateTaskRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplyingPatchOn != nil {
		toSerialize["applyingPatchOn"] = o.ApplyingPatchOn
	}
	if o.MainUserID != nil {
		toSerialize["mainUserID"] = o.MainUserID
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.SubUserID != nil {
		toSerialize["subUserID"] = o.SubUserID
	}
	return json.Marshal(toSerialize)
}

type NullableTaskUpdateTaskRequestBody struct {
	value *TaskUpdateTaskRequestBody
	isSet bool
}

func (v NullableTaskUpdateTaskRequestBody) Get() *TaskUpdateTaskRequestBody {
	return v.value
}

func (v *NullableTaskUpdateTaskRequestBody) Set(val *TaskUpdateTaskRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskUpdateTaskRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskUpdateTaskRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskUpdateTaskRequestBody(val *TaskUpdateTaskRequestBody) *NullableTaskUpdateTaskRequestBody {
	return &NullableTaskUpdateTaskRequestBody{value: val, isSet: true}
}

func (v NullableTaskUpdateTaskRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskUpdateTaskRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


