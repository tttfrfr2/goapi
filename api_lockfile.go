/*
Future Vuls Public API

Future Vuls Public API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// LockfileApiService LockfileApi service
type LockfileApiService service

type ApiLockfileAddLockfileRequest struct {
	ctx context.Context
	ApiService *LockfileApiService
	addLockfileRequestBody *LockfileAddLockfileRequestBody
	authorization *string
}

func (r ApiLockfileAddLockfileRequest) AddLockfileRequestBody(addLockfileRequestBody LockfileAddLockfileRequestBody) ApiLockfileAddLockfileRequest {
	r.addLockfileRequestBody = &addLockfileRequestBody
	return r
}

// api key auth
func (r ApiLockfileAddLockfileRequest) Authorization(authorization string) ApiLockfileAddLockfileRequest {
	r.authorization = &authorization
	return r
}

func (r ApiLockfileAddLockfileRequest) Execute() (*LockfileAddLockfileResponseBody, *http.Response, error) {
	return r.ApiService.LockfileAddLockfileExecute(r)
}

/*
LockfileAddLockfile addLockfile lockfile

add lockfile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLockfileAddLockfileRequest
*/
func (a *LockfileApiService) LockfileAddLockfile(ctx context.Context) ApiLockfileAddLockfileRequest {
	return ApiLockfileAddLockfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LockfileAddLockfileResponseBody
func (a *LockfileApiService) LockfileAddLockfileExecute(r ApiLockfileAddLockfileRequest) (*LockfileAddLockfileResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LockfileAddLockfileResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LockfileApiService.LockfileAddLockfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/lockfile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addLockfileRequestBody == nil {
		return localVarReturnValue, nil, reportError("addLockfileRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml", "application/gob"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/gob"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	// body params
	localVarPostBody = r.addLockfileRequestBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLockfileDeleteLockfileRequest struct {
	ctx context.Context
	ApiService *LockfileApiService
	lockfileID int64
	authorization *string
}

// api key auth
func (r ApiLockfileDeleteLockfileRequest) Authorization(authorization string) ApiLockfileDeleteLockfileRequest {
	r.authorization = &authorization
	return r
}

func (r ApiLockfileDeleteLockfileRequest) Execute() (*http.Response, error) {
	return r.ApiService.LockfileDeleteLockfileExecute(r)
}

/*
LockfileDeleteLockfile deleteLockfile lockfile

lockfile delete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param lockfileID Lockfile ID
 @return ApiLockfileDeleteLockfileRequest
*/
func (a *LockfileApiService) LockfileDeleteLockfile(ctx context.Context, lockfileID int64) ApiLockfileDeleteLockfileRequest {
	return ApiLockfileDeleteLockfileRequest{
		ApiService: a,
		ctx: ctx,
		lockfileID: lockfileID,
	}
}

// Execute executes the request
func (a *LockfileApiService) LockfileDeleteLockfileExecute(r ApiLockfileDeleteLockfileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LockfileApiService.LockfileDeleteLockfile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/lockfile/{lockfileID}"
	localVarPath = strings.Replace(localVarPath, "{"+"lockfileID"+"}", url.PathEscape(parameterToString(r.lockfileID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiLockfileGetLockfileDetailRequest struct {
	ctx context.Context
	ApiService *LockfileApiService
	lockfileID int64
	authorization *string
}

// api key auth
func (r ApiLockfileGetLockfileDetailRequest) Authorization(authorization string) ApiLockfileGetLockfileDetailRequest {
	r.authorization = &authorization
	return r
}

func (r ApiLockfileGetLockfileDetailRequest) Execute() (*LockfileGetLockfileDetailResponseBody, *http.Response, error) {
	return r.ApiService.LockfileGetLockfileDetailExecute(r)
}

/*
LockfileGetLockfileDetail getLockfileDetail lockfile

lockfile detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param lockfileID Lockfile ID
 @return ApiLockfileGetLockfileDetailRequest
*/
func (a *LockfileApiService) LockfileGetLockfileDetail(ctx context.Context, lockfileID int64) ApiLockfileGetLockfileDetailRequest {
	return ApiLockfileGetLockfileDetailRequest{
		ApiService: a,
		ctx: ctx,
		lockfileID: lockfileID,
	}
}

// Execute executes the request
//  @return LockfileGetLockfileDetailResponseBody
func (a *LockfileApiService) LockfileGetLockfileDetailExecute(r ApiLockfileGetLockfileDetailRequest) (*LockfileGetLockfileDetailResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LockfileGetLockfileDetailResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LockfileApiService.LockfileGetLockfileDetail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/lockfile/{lockfileID}"
	localVarPath = strings.Replace(localVarPath, "{"+"lockfileID"+"}", url.PathEscape(parameterToString(r.lockfileID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/gob"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLockfileGetLockfileListRequest struct {
	ctx context.Context
	ApiService *LockfileApiService
	page *int32
	limit *int32
	offset *int32
	filterServerID *int64
	filterPath *string
	authorization *string
}

// Page Number
func (r ApiLockfileGetLockfileListRequest) Page(page int32) ApiLockfileGetLockfileListRequest {
	r.page = &page
	return r
}

// Limit
func (r ApiLockfileGetLockfileListRequest) Limit(limit int32) ApiLockfileGetLockfileListRequest {
	r.limit = &limit
	return r
}

// Offset
func (r ApiLockfileGetLockfileListRequest) Offset(offset int32) ApiLockfileGetLockfileListRequest {
	r.offset = &offset
	return r
}

// ServerID filter
func (r ApiLockfileGetLockfileListRequest) FilterServerID(filterServerID int64) ApiLockfileGetLockfileListRequest {
	r.filterServerID = &filterServerID
	return r
}

// Path filter
func (r ApiLockfileGetLockfileListRequest) FilterPath(filterPath string) ApiLockfileGetLockfileListRequest {
	r.filterPath = &filterPath
	return r
}

// api key auth
func (r ApiLockfileGetLockfileListRequest) Authorization(authorization string) ApiLockfileGetLockfileListRequest {
	r.authorization = &authorization
	return r
}

func (r ApiLockfileGetLockfileListRequest) Execute() (*LockfileGetLockfileListResponseBody, *http.Response, error) {
	return r.ApiService.LockfileGetLockfileListExecute(r)
}

/*
LockfileGetLockfileList getLockfileList lockfile

lockfile list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLockfileGetLockfileListRequest
*/
func (a *LockfileApiService) LockfileGetLockfileList(ctx context.Context) ApiLockfileGetLockfileListRequest {
	return ApiLockfileGetLockfileListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LockfileGetLockfileListResponseBody
func (a *LockfileApiService) LockfileGetLockfileListExecute(r ApiLockfileGetLockfileListRequest) (*LockfileGetLockfileListResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LockfileGetLockfileListResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LockfileApiService.LockfileGetLockfileList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/lockfiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.filterServerID != nil {
		localVarQueryParams.Add("filterServerID", parameterToString(*r.filterServerID, ""))
	}
	if r.filterPath != nil {
		localVarQueryParams.Add("filterPath", parameterToString(*r.filterPath, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/gob"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLockfileUpdateLockfileRequest struct {
	ctx context.Context
	ApiService *LockfileApiService
	lockfileID int64
	updateLockfileRequestBody *LockfileUpdateLockfileRequestBody
	authorization *string
}

func (r ApiLockfileUpdateLockfileRequest) UpdateLockfileRequestBody(updateLockfileRequestBody LockfileUpdateLockfileRequestBody) ApiLockfileUpdateLockfileRequest {
	r.updateLockfileRequestBody = &updateLockfileRequestBody
	return r
}

// api key auth
func (r ApiLockfileUpdateLockfileRequest) Authorization(authorization string) ApiLockfileUpdateLockfileRequest {
	r.authorization = &authorization
	return r
}

func (r ApiLockfileUpdateLockfileRequest) Execute() (*LockfileUpdateLockfileResponseBody, *http.Response, error) {
	return r.ApiService.LockfileUpdateLockfileExecute(r)
}

/*
LockfileUpdateLockfile updateLockfile lockfile

update lockfile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param lockfileID Lockfile ID
 @return ApiLockfileUpdateLockfileRequest
*/
func (a *LockfileApiService) LockfileUpdateLockfile(ctx context.Context, lockfileID int64) ApiLockfileUpdateLockfileRequest {
	return ApiLockfileUpdateLockfileRequest{
		ApiService: a,
		ctx: ctx,
		lockfileID: lockfileID,
	}
}

// Execute executes the request
//  @return LockfileUpdateLockfileResponseBody
func (a *LockfileApiService) LockfileUpdateLockfileExecute(r ApiLockfileUpdateLockfileRequest) (*LockfileUpdateLockfileResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LockfileUpdateLockfileResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LockfileApiService.LockfileUpdateLockfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/lockfile/{lockfileID}"
	localVarPath = strings.Replace(localVarPath, "{"+"lockfileID"+"}", url.PathEscape(parameterToString(r.lockfileID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateLockfileRequestBody == nil {
		return localVarReturnValue, nil, reportError("updateLockfileRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml", "application/gob"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "application/gob"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	// body params
	localVarPostBody = r.updateLockfileRequestBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header_Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
